<?php
/**
 * @file
 * Code for the exhibition_base feature.
 */

include_once 'exhibition_base.features.inc';


DEFINE('EXHIBITION_BASE_INSTAGRAM_PAGE_URL', 'https://instagram.com/everydaysrebrenica');
DEFINE('EXHIBITION_BASE_ID_EPOCH_2015', 5);
DEFINE('EXHIBITION_BASE_ID_EPOCH_MOST_RECENT', EXHIBITION_BASE_ID_EPOCH_2015);



/**
 * Implementation of hook_menu().
 */
function exhibition_base_menu() {
  $items = array(
    'overview' => array(
      'page callback' => 'exhibition_base_menu_overview',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    ),
  );
  return $items;
}


/**
 * Retruns the frontpage as renderable array.
 *
 * @return array
 */
function exhibition_base_menu_overview() {
  $a = array();

  $a['container'] = exhibition_content_get_overview_content();
  $a['container']['#type'] = 'container';
  $a['container']['#attributes'] = array('class' => 'tiles');

  $a[] = array('#type' => 'markup', '#markup' => '');
  return $a;
}


/**
 * Implementation of hook_url_outbound_alter().
 *
 */
function exhibition_base_url_outbound_alter(&$path, &$options, $original_path) {
  // Set language for a link explicitly to the current language (if not already set elsewhere).
  // Workaround for a strange and un-clarified bug or misconfiguration where outgoing links not explicitely set to a
  // language are directed to the wrong language due to $GLOBALS['language_url'] having been initialized with that wrong
  // language (=default language?) supposedly somewhere during language_initialize.
// Not necessary since this seems to have been a language domain mis-configuration issue.
//  if (!isset($options['language'])) {
//    $options['language'] = $GLOBALS['language'];
//  }
}


/**
 * Gets an entity with given EFQ criteria or optionally creates one if none is found.
 *
 * Examples:
 *     $term = exhibition_instagram_get_entity('taxonomy_term', TRUE, array('name' => $tag, 'vid' => $tag_vocabulary->vid), array('bundle' => 'tag'));
 *
 *     $node = exhibition_instagram_get_entity('node', TRUE, array('field_imported_id' => array('value' => $id)), array(
 *       'type' => 'visual',
 *       'status' => 0,
 *       'language' => 'en',
 *       'title' => 'Instagram import ' . $media->id,
 *      ));
 */
function exhibition_base_get_entity($entity_type, $create_if_missing, $criteria, $defaults = array()) {
  // Try to retrieve an existing entity matching the $criteria using an entity field query.
  $entity = FALSE;

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', $entity_type)->range(0, 1);
  foreach($criteria as $criterion_key => $criterion_value) {
    // "field_*"-criterion => construct field condition.
    if ('field_' == substr($criterion_key, 0, 6)) {
      $criterion_value_field = @reset(array_keys($criterion_value));
      $criterion_value_data  = @reset($criterion_value);
      $query->fieldCondition($criterion_key, $criterion_value_field, $criterion_value_data);
    }
    // Property criterion => construct property condition.
    else {
      $defaults[$criterion_key] = $criterion_value;
      $query->propertyCondition($criterion_key, $criterion_value);
    }
  }

  $result = $query->execute();

  // If matching entity is found and returned, use that.
  if (isset($result[$entity_type])) {
    $entity = @reset(entity_load($entity_type, array_keys($result[$entity_type])));
    $entity->existing_entity = TRUE;
  }
  else if ($create_if_missing) {
    // If no matching existing entity found, create new one.
    $entity = new stdClass();
    foreach ($defaults as $default_key => $default_value) {
      $entity->{$default_key} = $default_value;
    }

    // Special treatment for some entity types.
    if ('node' == $entity_type) {
      node_object_prepare($entity);
    }

    // Save entity to make it come alive and have its id set.
    entity_save($entity_type, $entity);
  }

  return $entity;
}

